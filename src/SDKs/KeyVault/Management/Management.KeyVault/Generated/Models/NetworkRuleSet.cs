// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.KeyVault.Models
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Microsoft.Rest;


    public partial class NetworkRuleSet
    {
        /// <summary>
        /// Initializes a default instance of this class.
        /// </summary>
        public NetworkRuleSet()
        {
            DefaultAction = "Allow";
            Bypass = "AzureServices";
            IpRules = null;
            VirtualNetworkRules = null;
        }

        /// <summary>
        /// Specify default actions of "Allow" or "Deny".
        /// <see cref="IpRules"/> and <see cref="VirtualNetworkRules"/>
        /// property)
        /// </summary>
        /// <remarks>
        /// Action "Allow" disables firewall completely.
        /// Action "Deny" enables firewall with the other properties
        /// (see the <see cref="Bypass"/>, <see cref="IpRules"/> and
        /// <see cref="VirtualNetworkRules"/> properties)
        /// </remarks>
        [JsonProperty(PropertyName = "defaultAction")]
        public string DefaultAction { get; set; }

        /// <summary>
        /// Specify if traffic can bypass "AzureServices" or "None".
        /// </summary>
        /// <remarks>
        /// If this value is "AzureServices" (default) and
        /// the caller identity is one of whitelisted Azure services,
        /// then the request origin is ignored and the request proceeds.
        /// If this value is "None", then the caller identity is
        /// ignored and the request origin is verified against the
        /// IP rules (<see cref="IpRules"/> property).
        /// </remarks>
        [JsonProperty(PropertyName = "bypass")]
        public string Bypass { get; set; }

        /// <summary>
        /// List of IP address rules.
        /// </summary>
        [JsonProperty(PropertyName = "ipRules")]
        public IList<IPRule> IpRules { get; set; }

        /// <summary>
        /// List of virtual network rules.
        /// </summary>
        [JsonProperty(PropertyName = "virtualNetworkRules")]
        public IList<VirtualNetworkRule> VirtualNetworkRules { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (string.IsNullOrWhiteSpace(DefaultAction))
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DefaultAction");
            }

            if (string.IsNullOrWhiteSpace(Bypass))
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Bypass");
            }

            if (this.IpRules != null && this.IpRules.Count > 127)
            {
                throw new ValidationException(ValidationRules.MaxItems, "IpRules", 127);
            }

            if (this.VirtualNetworkRules != null && this.VirtualNetworkRules.Count > 127)
            {
                throw new ValidationException(ValidationRules.MaxItems, "VirtualNetworkRules", 127);
            }
        }
    }
}
